- name: check restor file exists
  ansible.builtin.stat:
    path: "{{ redmine_restore_files_archive_file }}"
  register: redmine_restor_file_result
- name: restore attachment files
  block:
    - name: restore files archive
      ansible.builtin.unarchive:
        src: "{{ redmine_restore_files_archive_file }}"
        dest: "{{ redmine_home }}/files"
        extra_opts: "{{ redmine_restore_files_archive_extra_opts | default(omit) }}"
        remote_src: true
    - name: change file owner
      ansible.builtin.file:
        path: "{{ redmine_home }}/files"
        owner: "{{ redmine_user }}"
        group: "{{ redmine_user }}"
        recurse: true
      become: true
  when: redmine_restor_file_result.stat.exists
- name: check restor file exists
  ansible.builtin.stat:
    path: "{{ redmine_restore_database_dump_file }}"
  register: redmine_restor_file_result
- name: restore redmine database dump data
  mysql_db:
    name: "{{ redmine_db_cfg.production.database }}"
    state: import
    target: "{{ redmine_restore_database_dump_file }}"
    login_host: "{{ redmine_restore_database_host | default(omit) }}"
    login_user: "{{ redmine_restore_database_user | default(omit) }}"
    login_password: "{{ redmine_restore_database_password | default(omit) }}"
    login_port: "{{ redmine_restore_database_port | default(omit) }}"
    login_unix_socket: "{{ redmine_restore_database_unix_socket | default(omit) }}"
  when:
    - redmine_restor_file_result.stat.exists
    - redmine_db_cfg.production.adapter == 'mysql2'
- name: set execute cache clear cariable
  ansible.builtin.set_fact:
    redmine_cache_clear: true
