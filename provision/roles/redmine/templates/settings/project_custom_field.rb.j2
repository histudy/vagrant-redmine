# カスタムフィールド(プロジェクト)
{% if redmine_project_custom_fields is defined %}
project_custom_fields = YAML.load(<<EOT)
{{ redmine_project_custom_fields | to_yaml }}
EOT
project_custom_fields.each do |item|
  next unless allow_field_formats.include?(item['field_format'])
  cf = ProjectCustomField.find_by_name(item['name'])
  cf = ProjectCustomField.new unless cf
  # 形式
  cf.field_format = item['field_format']
  # 名称
  cf.name = item['name']
  # 説明
  cf.description = item['description'] if item.key?('description')
  # 必須
  cf.is_required = !!item['is_required'] if item.key?('is_required')
  # 表示
  cf.visible = !!item['visible'] if item.key?('visible')

  # 最小値または最小文字列長
  if item.key?('min_length') && allow_length_formats.include?(item['field_format'])
    cf.min_length = item['min_length'].to_s
  end
  # 最大値値または最小文字列長
  if item.key?('max_length') && allow_length_formats.include?(item['field_format'])
    cf.max_length = item['max_length'].to_s
  end
  # 正規表現
  cf.regexp = item['regexp'] if item.key?('field_format') && allow_regexp_formats.include?(item['field_format'])
  # 初期値
  if item.key?('field_format') && allow_default_value_formats.include?(item['field_format'])
    if item['field_format'] == 'bool'
      default_value = item['default_value'].to_s
    else
      default_value = item['default_value'].to_s
    end
    cf.default_value = default_value
  end
  # テキスト書式
  if item.key?('text_formatting') && allow_text_formatting_formats.include?(item['field_format'])
    cf.text_formatting = item['text_formatting'] ? true : false
  end
  # 値に設定するリンクURL
  if item.key?('url_pattern') && allow_url_pattern_formats.include?(item['field_format'])
    cf.url_pattern = item['url_pattern']
  end
  # 表示(入力形式)
  if item.key?('edit_tag_style') && allow_edit_tag_style_formats.include?(item['field_format'])
    edit_tag_style = nil
    edit_tag_style = item['edit_tag_style'] if ['check_box', 'radio'].include?(item['edit_tag_style'])
    cf.edit_tag_style = edit_tag_style
  end
  # 複数選択
  if item.key?('multiple') && allow_multiple_formats.include?(item['field_format'])
    cf.multiple = item['multiple'] ? true : false
  end
  # 検索対象
  if item.key?('searchable') && allow_searchable_formats.include?(item['field_format'])
    cf.searchable = item['searchable'] ? true : false
  end
  # 選択肢
  if item.key?('possible_values') && item['field_format'] == 'list'
    cf.possible_values = item['possible_values']
  end
  # ロール
  if item.key?('user_role') && item['field_format'] == 'user'
    cf.user_role = Role.where(:name => item['user_role']).pluck(:id).map {|v| v.to_s }
  end
  # ステータス
  if item.key?('version_status') && item['field_format'] == 'version'
    cf.version_status = item['version_status'].select { |v| ['open', 'locked', 'closed'].include?(v) }
  end
  # 許可する拡張子
  if item.key?('extensions_allowed') && item['field_format'] == 'attachment'
    extensions_allowed = item['extensions_allowed']
    extensions_allowed = item['extensions_allowed'].join(',') if item['extensions_allowed'].is_a?(Array)
    cf.extensions_allowed = extensions_allowed
  end
  # フィルタとして使用
  if item.key?('is_filter') && item['field_format'] != 'attachment'
    cf.is_filter = item['is_filter'] ? true : false
  end
  cf.save
end
{% endif %}
